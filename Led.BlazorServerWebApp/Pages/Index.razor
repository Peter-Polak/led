@page "/"
@using System.Runtime.InteropServices

@inject Hub75Matrix matrix


<PageTitle>Index</PageTitle>

<h1>Home</h1>

<div>
    <div><span>Power:</span> <span>@(matrix.IsOn ? "On" : "Off")</span></div>
    <div><span>PWM Duration:</span> <span>@(matrix.PwmDuration)</span></div>
    <div><span>Render delay:</span> <span>@(matrix.RenderDelay)</span></div>
</div>

<div>
    <Button BackgroundColor="red" OnClick=@(() => matrix.Fill(Color.Red))>Test Red</Button>
    <Button BackgroundColor="green" OnClick=@(() => matrix.Fill(Color.Green))>Test Green</Button>
    <Button BackgroundColor="blue" OnClick=@(() => matrix.Fill(Color.Blue))>Test Blue</Button>
</div>

<div>
    <Button BackgroundColor="" OnClick=@(() => matrix.Clear())>Clear</Button>
    <Button BackgroundColor="" OnClick=@(() => matrix.CancelCurrentTask(true))>Cancel</Button>
</div>

<div>
    <PowerButton IsOn=@true OnToggle=TurnOffRaspberryPi>@MaterialIcons.PowerButton</PowerButton>
    <PowerButton @bind-IsOn=@matrix.IsOn>@MaterialIcons.Lightbulb</PowerButton>
</div>


@code{
    

    private void TurnOffRaspberryPi()
    {
        if (!RuntimeInformation.IsOSPlatform(OSPlatform.Linux)) return;

        string command = "sudo poweroff";
        using (System.Diagnostics.Process proc = new System.Diagnostics.Process())
        {
            proc.StartInfo.FileName = "/bin/bash";
            proc.StartInfo.Arguments = $"-c \" {command} \"";
            proc.StartInfo.UseShellExecute = false;
            proc.StartInfo.RedirectStandardOutput = true;
            proc.StartInfo.RedirectStandardError = true;
            proc.Start();
        }
    }
}
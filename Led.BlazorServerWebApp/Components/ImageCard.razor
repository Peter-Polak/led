@implements IDisposable
@inject Hub75Matrix matrix

<button @onclick=OnClickHandler>
    @if (isRendered && ShowRenderOverlay)
    {
        <div class="click-overlay">
            <MaterialIcon Color="#0C9500" Size="70px">check_circle</MaterialIcon>
        </div>   
    }
    <img src="@Image?.GetPathRelative(false)"/>
</button>

@code {
    [Parameter] public EventCallback<Media?> OnClick { get; set; }
    [Parameter] public Media Image { get; set; }
    [Parameter] public bool ShowRenderOverlay { get; set; } = true;

    private bool isRendered = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        OnImageDrawCallback(this, matrix.CurrentImage);
        matrix.ImageDrawn += OnImageDrawCallback;
    }

    void IDisposable.Dispose()
    {
        matrix.ImageDrawn -= OnImageDrawCallback;
    }

    private void OnImageDrawCallback(object source, Media? image)
    {
        InvokeAsync(
            () =>
            {
                if (Image?.GetPathRelative(true) == image?.GetPathRelative(true))
                {
                    isRendered = true;
                }
                else
                {
                    isRendered = false;
                }

                StateHasChanged();
            }
        );
    }

    private async Task OnClickHandler()
    {
        if (OnClick.HasDelegate && !isRendered)
        {
            await OnClick.InvokeAsync(Image);
        }
    }
}

@implements IDisposable
@inject Hub75Matrix matrix

<button class="@(ButtonClasses)" @onpointerup=Toggle>
    <MaterialIcon Size="150px">
        @if(Direction == TurnSignal.Left)
        {
            @MaterialIcons.ArrowLeft
        }
        else if(Direction == TurnSignal.Right)
        {
            @MaterialIcons.ArrowRight
        }
    </MaterialIcon>
</button>

@if (isBlinking)
{
    @if (isOn)
    {
        <audio autoplay><source src="/media/sound/blinker_on.wav" /></audio>
    }
    else
    {
        <audio autoplay><source src="/media/sound/blinker_off.wav" /></audio>
    }
}


@code {
    public enum TurnSignal { Right, Left }

    [Parameter, EditorRequired] public TurnSignal Direction { get; set; }
    [Parameter] public EventCallback<bool> OnCallback { get; set; }
    [Parameter] public EventCallback<bool> OffCallback { get; set; }
    [Parameter] public int OnDuration { get; set; }
    [Parameter] public int OffDuration { get; set; }
    [Parameter] public CancellationToken CancellationToken { get; set; }

    private bool isBlinking = false;
    private bool isOn = true;
    private string ButtonClasses => isBlinking ? (isOn ? "on" : "off") : "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (matrix.CurrentTaskName == Direction.ToString()) isBlinking = true;
        matrix.ImageDrawn += OnImageDrawCallback;
        matrix.CurrentTaskStarted += OnCurrentTaskStartCallback;
        matrix.CurrentTaskCompleted += OnCurrentTaskCompleteCallback;
    }

    void IDisposable.Dispose()
    {
        matrix.ImageDrawn -= OnImageDrawCallback;
        matrix.CurrentTaskStarted -= OnCurrentTaskStartCallback;
        matrix.CurrentTaskCompleted -= OnCurrentTaskCompleteCallback;
    }

    private void OnImageDrawCallback(object source, Media? image)
    {
        InvokeAsync(
            () =>
            {
                Media arrow = Direction == TurnSignal.Left ? Media.ArrowLeft : Media.ArrowRight;
                var path = arrow.GetPathRelative(true);

                if (path == image?.GetPathRelative(true))
                {
                    isOn = true;
                }
                else
                {
                    isOn = false;
                }

                StateHasChanged();
            }
        );
    }

    private void OnCurrentTaskStartCallback(object source, string taskName)
    {
        InvokeAsync(
            () =>
            {
                if (taskName == Direction.ToString() && isBlinking == false)
                {
                    isBlinking = true;
                    StateHasChanged();
                }
            }
        );
    }

    private void OnCurrentTaskCompleteCallback(object source, string taskName)
    {
        InvokeAsync(
            () =>
            {
                if (taskName == Direction.ToString() && isBlinking == true)
                {
                    isBlinking = false;
                    StateHasChanged();
                }
            }
        );
    }

    private void Toggle()
    {
        if(isBlinking)
        {
            matrix.CancelCurrentTask();
        }
        else
        {
            matrix.CancelCurrentTask(false);
            Blink();
        }
    }

    private void Blink()
    {
        matrix.RunTask(
            () =>
            {
                Media arrow = Direction == TurnSignal.Left ? Media.ArrowLeft : Media.ArrowRight;
                var path = arrow.GetPathRelative(true);
                using var image = Image.Load<Rgb24>(path);

                while (!matrix.CancellationToken.IsCancellationRequested)
                {
                    matrix.DrawImage(image, arrow);
                    Task.Delay(OnDuration).Wait();

                    if (matrix.CancellationToken.IsCancellationRequested) break;

                    matrix.Clear();
                    Task.Delay(OffDuration).Wait();
                }
            }
            , Direction.ToString());   
    }
}
